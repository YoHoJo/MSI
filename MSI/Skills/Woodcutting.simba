(*
Woodcutting
===========

The Woodcutting file holds all the functions/procedures that are used
specifically for the Woodcutting skill.

The source for Woodcutting.simba can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Skills/Woodcutting.simba>`_.

*)

const
  TREE_MAX_DIST = 75; // Maximum pixel distance from tracking box to player

(*
MSI_SetupWoodcutting
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_SetupWoodcutting(): Boolean;

Sets the player up for Woodcutting.  Will start by looking for the best hatchet
depending on the player's skill level.  Will check both the equipment and
inventory tabs.  If a hatchet can't be found, it will attempt to withdraw one
from the bank (if player is at a bank), and equip it depending on the player's
attack level.  This function is pointed to any woodcutting script's
'PlayerSetup' attribute.

.. note::

  | Author: Coh3n
  | Last Updated: 06 October 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_Scripts[SCRIPT_VE_TREES].PlayerSetup := @MSI_SetupWoodcutting;
*)
function MSI_SetupWoodcutting(): Boolean;
var
  i, j, x, y: Integer;
  tabs: TIntegerArray;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_SetupWC/Mining');

  // If it's already on the inventory, it will search there first
  if (GetCurrentTab = TAB_INV) then
    tabs := [TAB_INV, TAB_EQUIP]
  else
    tabs := [TAB_EQUIP, TAB_INV];

  for i := 0 to 1 do
  begin
    for j := MSI_BestTool downto MSI_WorstTool do // First search for the best tool
      if (MSI_FindTool(j, tabs[i], x, y)) then
      begin
        if (tabs[i] = TAB_INV) then
          MSI_Items[j].InvSlot := CoordsToItem(x, y); // Set tool's inventory slot

        Result := True;
        Break;
      end;

    if (Result) then
      Break;
  end;

  with MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name] do // CurrentScript
    if (not Result) then
      if (not (BankType = NoBank)) then // If CurrentScript is a banking one
        if (MSI_Locations[MSI_Players[CurrentPlayer].Location].AtBank) then // If player is at a bank
          Result := MSI_WithdrawBestTool();

  MSI_CloseHeader('MSI_SetupWC/Mining: ' + BoolToStr(Result));
end;

(*
MSI_FindBirdNest
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_FindBirdNest(): Boolean;

Finds and picks up birds nest if fallen from a tree.  This function is only
called in MSI_WaitWhileChopping, and if the current player is a member.

.. note::

  | Author: NCDS
  | Last Updated: 21 July 2010 by NCDS

Example:

.. code-block:: pascal

  if (MSI_FindBirdNest) then
    MSI_Debug('Found and picked up bird's nest');
*)
function MSI_FindBirdNest: Boolean;
var
  SearchBox: TBox;
begin
  if (not (MSI_Players[CurrentPlayer].Member)) or (not LoggedIn) then
    Exit;

  MSI_Debug('Looking for bird''s nests');

  if (not MSI_Players[CurrentPlayer].Member) or
   (not(IsChatBoxTextBetween(BIRD_NEST_CBMESSAGE, 0, 8, 6))) then
     Exit;

  SearchBox := IntToBox(MSCx - 100, MSCy - 100, MSCx + 100, MSCy + 100);

  if MSI_FindObjectIn(OBJ_BIRD_NEST, SearchBox, ClickLeft) then
  begin
    Result := True;
    Flag;
    Wait(RandomRange(100, 300));
  end;
end;

(*
MSI_WaitWhileChopping
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_WaitWhileChopping(TreeID: Integer);

Waits while the player is chopping a tree.  This procedure has a lot of
failsafes including looking for the tree in a box close to the player (after
tracking the object), inventory checks, and animation checks.

.. note::

  | Author: marpis
  | Last Updated: 07 September 2010 by NCDS

Example:

.. code-block:: pascal

  if MSI_FindObject(TREE_NORMAL, ClickLeft) then
    MSI_WaitWhileChopping(TREE_NORMAL);
*)
Procedure MSI_WaitWhileChopping(TreeID: integer);
Var
  CTS, HalfWidth, HalfHeight, L, I, T, OldInvCount, NewInvCount, tDist, prevLen: Integer;
  TotalChopTime, R, CT: Integer;
  ATPA: T2DPointArray;
  TPA: TPointArray;
  Objs: TIntegerArray;
  B: TBox;
  TreeExists, Debug: Boolean;
Begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_WaitWhileChopping');

  Objs := MSI_Players[CurrentPlayer].Scripts[CurrentScript].Trees;

  CTS := GetColorToleranceSpeed;

  SetColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(MSI_Objects[TreeID].Hue, MSI_Objects[TreeID].Sat);

  HalfWidth := Round(MSI_Objects[TreeID].W * 0.7);
  HalfHeight := Round(MSI_Objects[TreeID].H * 0.7);
  B := IntToBox(MSI_Objects[TreeID].X - HalfWidth, MSI_Objects[TreeID].Y - HalfHeight,
                MSI_Objects[TreeID].X + HalfWidth, MSI_Objects[TreeID].Y + HalfHeight);

  L := Length(MSI_Objects[TreeID].Colors);
  SetLength(ATPA, L);
  Dec(L);

  OldInvCount := InvCount;
  T := (GetSystemTime + MSI_Objects[TreeID].MaxTime + Random(5000));
  TotalChopTime := (GetSystemTime + (4 * 60000));

  Repeat
    Debug := (Random(10) < 3);

    If InvFull Then
      Break;

    MSI_FindRandoms(False);
    MSI_AntiBan(RandomRange(0, 5000), ANTI_BAN_CHANCE);

    // Check if the tree Exists
    if (Debug) then
      MSI_Debug('Looking for tree');

    For I := 0 To L Do
      FindColorsTolerance(ATPA[I], MSI_Objects[TreeID].Colors[I],
                          B.X1, B.Y1, B.X2, B.Y2, MSI_Objects[TreeID].Tol);
    TPA := MergeATPA(ATPA);
    SortTPAFrom(TPA, Point(MSCX, MSCY));

    if (Length(TPA) > 0) then
    begin
      if (length(TPA) <= (prevLen / 2)) then
      begin
        MSI_Debug('Length(TPA) < half the previous, tree is gone');
        break;
      end;

      if (MSI_SetupVars[SETUP_DEBUG_SMART]) then
        SMART_DrawDotsEx(True, TPA, clYellow);

      // Gets distance from closest point to player
      tDist := Distance(TPA[0].x, TPA[0].y, MSCX, MSCY);

      // Resets the tracking box to a box the size of the tree located around the closest point
      B := MSI_MakeBox(Point(TPA[0].x, TPA[0].y), MSI_Objects[TreeID].W, MSI_Objects[TreeID].H);

      if (MSI_SetupVars[SETUP_DEBUG_SMART]) then
        SMART_DrawBoxEx(False, B, clBlue);

      prevLen := length(TPA);
    end;

    if (Debug) then
      MSI_Debug('Track box distance: '+IntToStr(tDist));

    if (tDist > TREE_MAX_DIST) then
    begin
      if (Debug) then
        MSI_Debug('Tracking box is over the maximum distance');
      Break;
    end;

    TreeExists := Length(TPA) >= MSI_Objects[TreeID].Accuracy;
    If (TreeExists) Then
      If (Random(4) <> 0) Then
        Wait(200 + Random(50))
      Else
        SleepAndMoveMouse(200 + Random(50));

    if (random(20) < 5) then
      if MSI_FindBirdNest then
        Break;

    // InvCount check
    if (Debug) then
      MSI_Debug('Checking inventory count');

    NewInvCount := InvCount;
    If (NewInvCount > OldInvCount) Then
    Begin
      if (Debug) then
        MSI_SubDebug('New count > old count');

      OldInvCount := NewInvCount;
      T := (GetSystemTime + MSI_Objects[TreeID].MaxTime + Random(5000));
    End;

    // Prevent logout
    If ((TotalChopTime - GetSystemTime) < 60000) Then
    Begin
      if (Debug) then
        MSI_Debug('Preventing logout');

      CT := GetCurrentTab;
      Repeat
        R := RandomRange(Tab_Combat, Tab_Notes);
      Until(R <> CT);
      GameTab(R);

      if (Debug) then
        MSI_SubDebug('Clicking game tab: ' + IntToStr(R));
      Wait(RandomRange(500, 1000));
    End;

    if (GetCurrentTab <> tab_Inv) then
      MouseBox(646, 177, 662, 195, 1);

  Until(Not TreeExists) Or (GetSystemTime > T) Or (Not LoggedIn);

  MSI_CloseHeader('MSI_WaitWhileChopping: Finished');

  SetColorToleranceSpeed(CTS);
  SetColorSpeed2Modifiers(0.2, 0.2);
End;

(*
MSI_ChopTree
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_ChopTree(Which: TIntegerArray; var ForceFail: Boolean): Boolean;

Finds and chops the first tree found in the array 'Which'.  'ForceFail' is used
to deliberately make the function fail if for some reason the player's hatchet
was lost, for example.

.. note::

  | Author: marpis
  | Last Updated: 25 June 2010 by marpis

Example:

.. code-block:: pascal

  if (MSI_ChopTree([TREE_NORMAL, TREE_OAK], fail)) then
    if (not fail) then
      MSI_Debug('Chopped tree');
*)
function MSI_ChopTree(Which: TIntegerArray; var ForceFail: Boolean): Boolean;
var
  TreeIndex: Integer;
begin
  if (not LoggedIn) then
    Exit;

  if MSI_FindObjects(Which, TreeIndex, ClickLeft) then
  begin
    Result := True;
    MSI_WaitWhileChopping(Which[TreeIndex]);
  end else begin
    Wait(RandomRange(250, 750));
    MSI_FindRandoms(True);
  end;
end;

(*
MSI_ChopInvFull
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_ChopInvFull: Boolean;

Calls MSI_AutoInvFull (Skills.simba).  This is the function that is pointed to
a Woodcutting script's 'AutoObjects' attribute.

.. note::

  | Author: Coh3n
  | Last Updated: 20 September 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_Scripts[SCRIPT_VE_TREES].AutoObjects := @MSI_ChopInvFull;
*)
function MSI_ChopInvFull: Boolean;
begin
  Result := MSI_AutoInvFull(@MSI_ChopTree); // MSI_AutoInvFull in Skills.simba
end;


