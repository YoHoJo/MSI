(*
Mainloop
========

The Mainloop file holds all the main MSI functions that are called in
MSI_MainLoop.

The source for Mainloop.simba can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Mainloop.simba>`_.

*)

(*
MSI_SetupPlayer
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_SetupPlayer: Boolean;

Logs the player in if not already logged in, and calls the current player's
current script's setup procedure.

.. note::

  | Author: Coh3n
  | Last Updated: 11 February 2010 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_SetupPlayer) then
    MSI_UnsetPlayer('Failed to setup player', False);
*)
function MSI_SetupPlayer: Boolean;
begin
  MSI_AddHeader('MSI_SetupPlayer');

  if (not LoggedIn) then
  begin
    MSI_Debug('Player is not logged in');
    LoginPlayer();
    if (not (WaitFunc(@LoggedIn, 100, 15000))) then
    begin
      MSI_CloseHeader('MSI_SetupPlayer: ' + BoolToStr(Result));
      Exit;
    end;
  end;

  // To handle relocating for power scripts
  {$IFDEF REFLECTION}
  with MSI_Locations[MSI_Players[CurrentPlayer].Location] do
    if (Length(Tiles) <= 0) then // If there are no relocation points
    begin
      SetLength(Tiles, Length(Tiles) + 1);
      Tiles[High(Tiles)] := GetMyPos; // Add the point the player is on
    end;
  {$ENDIF}

  // Add logins to stats
  stats_IncVariable('Total Logins', 1);

  // Standard setup procedures
  MSI_FindRandoms(True);
  SetAngle(True);
  RunEnergy(20);

  // Setup the player
  MSI_SetSkillLevels();
  with MSI_Players[CurrentPlayer] do
    Result := MSI_Scripts[Scripts[CurrentScript].Name].PlayerSetup();

  MSI_CloseHeader('MSI_SetupPlayer: ' + BoolToStr(Result));
end;

(*
MSI_CountItems
~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_CountItems;

This procedure is called before the player banks/drops after finishing a load.
It will count the script items in the player's inventory and add them to the
progress report.

.. note::

  | Author: Coh3n
  | Last Updated: 07 November 2010 by Coh3n

Example:

.. code-block:: pascal

  if (WalkedToBank) then
    MSI_CountItems;
*)
procedure MSI_CountItems;
var
  itemCount, expCount, j, k: Integer;
  objs: TIntegerArray;
begin
  if (not LoggedIn) then
    Exit;

  GameTab(TAB_INV);

  with MSI_Players[CurrentPlayer] do
  begin
    case (MSI_Scripts[Scripts[CurrentScript].Name].SkillConst) of
      SKILL_WOODCUTTING:
        objs := Scripts[CurrentScript].Trees;

      SKILL_MINING:
        objs := Scripts[CurrentScript].Rocks;

      SKILL_FISHING:
        objs := Scripts[CurrentScript].FishSpots;

      SKILL_COOKING:
        objs := Scripts[CurrentScript].CookingSpot;
    end;

    for j := 0 to High(objs) do
      for k := 0 to High(ReportInfo.Items[CurrentScript][j]) do
      begin
        itemCount := CountItems('dtm', MSI_Items[ReportInfo.Items[CurrentScript][j][k]].DTM, []);
        expCount  := Round(ReportInfo.Experiences[CurrentScript][j][k] * itemCount);

        MSI_AddToProggy(PROG_ADD_EXP, -1, -1, expCount);  // Adds experience
        MSI_AddToProggy(PROG_ADD_ITEMS, j, k, itemCount); // Adds items

        MSI_Debug('MSI_CountItems: Found '+IntToStr(itemCount)+' of '+
                  MSI_Items[ReportInfo.Items[CurrentScript][j][k]].Name+' ('+
                  IntToStr(expCount) + ' XP)');
      end;
  end;
end;

(*
MSI_Walk
~~~~~~~~

.. code-block:: pascal

  function MSI_Walk(ToLoc: Boolean): Boolean;

Walks either to the autoing location or from the autoing location to the bank.
Depends on the boolean parameter 'ToLoc'.  Setting 'ToLoc' to true will walk to
the location, setting it the false will walk from the location to the bank.

.. note::

  | Author: Coh3n
  | Last Updated: 21 August 2010 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_Walk(True)) then
    MSI_UnsetPlayer('Failed to walk to location', False);
*)
function MSI_Walk(ToLoc: Boolean): Boolean;
var
  Script: TScript;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_Walk');

  MSI_WaitWhileResting;

  with MSI_Players[CurrentPlayer] do
  begin
    MSI_Debug('Player''s Location = '+MSI_Locations[Location].Name);
    Script := MSI_Scripts[Scripts[CurrentScript].Name];

    if (ToLoc) then
      Result := MSI_AtLocation(Script.PathInfo.EndLoc)
    else
      Result := MSI_AtLocation(Script.PathInfo.StartLoc);

    if (not Result) then
      if (ToLoc) then
      begin
        if (Location = Script.PathInfo.StartLoc) then
          Result := MSI_PerformWalk(Script.PathInfo.StartLoc, Script.PathInfo.EndLoc);
      end else
        if (Location = Script.PathInfo.EndLoc) then
          Result := MSI_PerformWalk(Script.PathInfo.EndLoc, Script.PathInfo.StartLoc);
  end;

  if (Result) then
    stats_IncVariable('Times Walked', 1);

  MSI_CloseHeader('MSI_Walk: ' + BoolToStr(Result));
end;

(*
MSI_AutoObjects
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_AutoObjects: Boolean;

Calls the current player's current script's AutoObjects procedure.  If the
script requires dropping, it will drop the player's inventory.

.. note::

  | Author: Coh3n
  | Last Updated: 04 August 2010 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_AutoObjects) then
    MSI_UnsetPlayer('Failed to auto objects', False);
*)
function MSI_AutoObjects: Boolean;
var
  scriptConst: Integer;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_AutoObjects');

  scriptConst := MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name;

  Result := MSI_Scripts[scriptConst].AutoObjects();

  if (MSI_Scripts[scriptConst].BankType = Drop) then //drop the items if not banking
  begin
    MSI_CountItems;
    MSI_DropAll;
    MSI_AddToProggy(PROG_ADD_LOADS, -1, -1, -1);
    Result := True;
  end;

  MSI_CloseHeader('MSI_AutoObjects: ' + BoolToStr(Result));
end;

(*
MSI_BankMaterials
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_BankMaterials(): Boolean;

Calls the current player's current script's BankObjects procedure.  Returns true
if banking was successful.  Covers any type of banking from standard to NPC to
depositing and withdrawing.

.. note::

  | Author: Coh3n
  | Last Updated: 24 March 2011 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_BankMaterials) then
    MSI_UnsetPlayer('Failed to bank materials', False);
*)
function MSI_BankMaterials(): Boolean;
var
  scriptConst: Integer;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_BankMaterials');
  MSI_CountItems;

  scriptConst := MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name;
  Result := MSI_Scripts[scriptConst].BankObjects();

  MSI_AddToProggy(PROG_ADD_LOADS, -1, -1, -1);
  stats_IncVariable('Times Banked', 1);

  MSI_CloseHeader('MSI_BankMaterials: '+BoolToStr(Result));
end;

(*
MSI_TimedOut
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_TimedOut: Boolean;

Is called before setting the player false.  A player may have been set to false
somewhere in SRL (i.e. failed a random), or the connection may have timed out.
This checks for both, and if timed out, will wait and log the player back in.

.. note::

  | Author: Coh3n
  | Last Updated: 10 June 2010 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_AutoObjects) then
    if (not MSI_TimedOut) then
      MSI_UnsetPlayer('Failed to auto objects', False);
*)
function MSI_TimedOut: Boolean;
var
  t: Integer;
begin
  Result := False;

  // Check if SRL set player to false
  if (not Players[CurrentPlayer].Active) then
  begin
    MSI_Debug('Went inactive somewhere in SRL');
    MSI_Players[CurrentPlayer].ReportInfo.FalseReason := 'Went inactive somewhere in SRL';
    MSI_Players[CurrentPlayer].Active := False;

    if (Players[CurrentPlayer].Rand <> '') then
      MSI_Players[CurrentPlayer].ReportInfo.FalseReason := 'In random: '+Players[CurrentPlayer].Rand;

    Exit;
  end;
  
  t := GetSystemTime + 10000;
  while (GetSystemTime < t) do
    if (LobbyScreen) or (not LoggedIn) then
    begin
      MSI_SubDebug('MSI_TimedOut: Suspicion of connection loss');
      
      if (LobbyScreen) then
        MouseBox(80, 450, 560, 470, 1)
      else
        if (not LoggedIn) then
          LoginPlayer;

      Result := True;
      Break;
    end;

  if (Result) then
    WaitFunc(@LoggedIn, 500, 10000);
end;

(*
MSI_UnsetPlayer
~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_UnsetPlayer(reason: String; setReason: Boolean);

Sets the current player's activity to false.  Will set the reason as 'reason' if
'setReason' is true, or if a reason hasn't been set elseware.  Switches to the
next player or terminates the script if all players are inactive.

.. note::

  | Author: Sir R. Magician & Coh3n
  | Last Updated: 03 July 2010 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_AutoObjects) then
    if (not MSI_TimedOut) then
      MSI_UnsetPlayer('Failed to auto objects', False);
*)
procedure MSI_UnsetPlayer(reason: String; setReason: Boolean);
begin
  MSI_AddHeader('MSI_UnsetPlayer');

  if (BankScreen) then
    CloseBank;

  MSI_Debug(reason);
  MSI_Players[CurrentPlayer].Active := False;
  Players[CurrentPlayer].Active := False;
  
  if (setReason) then
    MSI_Players[CurrentPlayer].ReportInfo.FalseReason := reason
  else
    if (MSI_Players[CurrentPlayer].ReportInfo.FalseReason = '') then
      MSI_Players[CurrentPlayer].ReportInfo.FalseReason := reason;

  if (Players[CurrentPlayer].Rand <> '') then
    MSI_Players[CurrentPlayer].ReportInfo.FalseReason := 'In random: '+Players[CurrentPlayer].Rand;
    
  MSI_ProgressReport;

  if ((HowManyPlayers <= 1) or (PlayersActive <= 0)) then
  begin
    Logout();
    MSI_SubDebug('All players inactive');
    TerminateScript();
  end else
    NextPlayer(false);

  stats_IncVariable('Total Logins', 1);
  MSI_CloseHeader('MSI_UnsetPlayer: Finished');
end;

(*
MSI_HandleBreaking
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_HandleBreaking;

Simulates a "human-like" breaking.  If MSI_SetupVars[SETUP_HUMAN_BREAK] (script setup
variable found in RunMe.simba) is set to true it will randomly logout,
time-out, or exit to the lobby, otherwise it will just exit to the lobby.
If using multiple players, it will switch to the next player.

.. note::

  | Author: Coh3n
  | Last Updated: 10 Febuary 2011 by NCDS

Example:

.. code-block:: pascal

  if (TimeToBreak) then
    MSI_HandleBreaking;
*)
procedure MSI_HandleBreaking;
var
  t, _avg: Integer;
begin
  if (not LoggedIn) then
    Exit;

  if not MSI_SetupVars[SETUP_HUMAN_BREAK] then
    if MSI_Players[CurrentPlayer].BreakTime = 0 then
      if MSI_SetupVars[SETUP_BREAK_TIME] = 0 then
        Exit;

  if (BankScreen) then
    CloseBank;

  MSI_AddHeader('MSI_HandleBreaking');

  if (HowManyPlayers = 1) or (PlayersActive = 1) then
  begin
    MSI_Debug('Taking a short break');

    if MSI_SetupVars[SETUP_HUMAN_BREAK] then
      case Random(10) of

        0, 2: Logout;

        1: while LoggedIn do
           begin
             Wait(RandomRange(200, 500));
             MSI_FindRandoms(False);
           end;

        3..6: begin
                t := (GetSystemTime + RandomRange(60000, 60000 * 3));
                while (t > GetSystemTime) and LoggedIn do
                begin
                  Wait(RandomRange(200, 500));
                  MSI_FindRandoms(False);
                end;

                if LoggedIn then
                  if InRange(Random(10), 1, 5) then
                    Logout
                  else
                    ExitToLobby;
              end;

        7..9: ExitToLobby;
      end
    else
      if InRange(Random(10), 2, 9) then
        ExitToLobby;

    _avg := Round(SETUP_BREAK_TIME * RANDOM_TIME_PERCENT);
    t := (GetSystemTime + ((MSI_SetupVars[SETUP_BREAK_TIME] * 60000) + RandomRange(-_avg * 60000, _avg * 60000)));
    while GetSystemTime < t do
    begin
      Status('MSI_SetupVars[SETUP_BREAK_TIME] remaining: '+MsToTime(t - GetSystemTime, Time_Formal)+';');
      Wait(RandomRange(2000, 25000));
      if LoggedIn then
        MSI_FindRandoms(False);
    end;

    MSI_Debug('Break over, continuing to play');

    if (LobbyScreen) then
      MouseBox(80, 450, 560, 470, 1);
  end else
  begin
    MSI_Debug('Switching players');
    NextPlayer(True);
  end;

  WaitFunc(@LoggedIn, 100, 15000);

  stats_IncVariable('Total Logins', 1);
  MSI_CloseHeader('MSI_HandleBreaking: ' + BoolToStr(LoggedIn));
end;

(*
MSI_CheckLoads
~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_CheckLoads(TempLoads: Integer; var Reason: string; var TakeBreak: Boolean): Boolean;

Checks the current player's loads done with the temporary loads done parameter,
'TempLoads'.  If maximum loads are finished, 'reason' is set so user's know that
player has finished.  If 'TempLoads' exceeds the player's loads to do before
breaking, 'reason' is not set, and 'TakeBreak' is set to true so the script will
take a break or switch to the next player.

.. note::

  | Author: Coh3n
  | Last Updated: 03 December 2010 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_CheckLoads(tmp, reason, tBreak)) then
    if (not tBreak) then
      MSI_UnsetPlayer(reason, false)
    else
      MSI_HandleBreaking;
*)
function MSI_CheckLoads(TempLoads: Integer; var Reason: string; var TakeBreak: Boolean): Boolean;
var
  _avg: Integer;
begin
  with MSI_Players[CurrentPlayer] do
  begin
    // Handle finishing total loads
    if (TotalLoads > 0) then
    begin
      MSI_SubDebug('Total loads done: '+IntToStr(ReportInfo.LoadsDone));

      _avg := Round(TotalLoads * RANDOM_TIME_PERCENT);

      if (ReportInfo.LoadsDone >= (TotalLoads + RandomRange(-_avg, _avg))) then
      begin
        MSI_SubDebug('Finished total loads');
        Reason := 'Finished total loads!';
        Result := True;
        Exit;
      end;
    end;

    // Breaking via loads
    if (BreakLoads > 0) then
    begin
      MSI_SubDebug('Temp loads done: '+IntToStr(TempLoads));

      _avg := Round(BreakLoads * RANDOM_TIME_PERCENT);

      if (TempLoads >= (BreakLoads + RandomRange(-_avg, _avg))) then
      begin
        MSI_SubDebug('Finished loads before breaking');
        TakeBreak := True;
        Result := True;
        Exit;
      end;
    end;
  end;
end;

(*
MSI_CheckTime
~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_CheckTime(TempTime: Integer; var Reason: string; var TakeBreak: Boolean): Boolean;

Works exactly like MSI_CheckLoads, excepts compares 'TempTime' with the current
player's playing time.

.. note::

  | Author: Coh3n
  | Last Updated: 03 December 2010 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_CheckTime(tmp, reason, tBreak)) then
    if (not tBreak) then
      MSI_UnsetPlayer(reason, false)
    else
      MSI_HandleBreaking;
*)
function MSI_CheckTime(TempTime: Integer; var Reason: string; var TakeBreak: Boolean): Boolean;
var
  _avg: Integer;
begin
  with MSI_Players[CurrentPlayer] do
  begin
    // Completed total time (common for all skills)
    if (TotalTime > 0) then
    begin
      MSI_SubDebug('Total playing time: '+IntToStr(Round(ReportInfo.PlayerTime / 60000)));
      MSI_SubDebug('Max playing time: '+IntToStr(TotalTime));

      _avg := Round(TotalTime * RANDOM_TIME_PERCENT);

      if (Round(ReportInfo.PlayerTime / 60000) >= (TotalTime + RandomRange(-_avg, _avg))) then
      begin
        MSI_SubDebug('Finished total time');
        Reason := 'Finished total time!';
        Result := True;
        Exit;
      end;
    end;

    // Handle breaking via time (common for all skills)
    if (BreakTime > 0) then
    begin
      MSI_SubDebug('Temp playing time: '+IntToStr(TempTime));

      _avg := Round(BreakTime * RANDOM_TIME_PERCENT);

      if (Round(TempTime / 60000) >= (BreakTime + RandomRange(-_avg, _avg))) then
      begin
        MSI_SubDebug('Finished total time before breaking');
        TakeBreak := True;
        Result := True;
        Exit;
      end;
    end;
  end;
end;

(*
MSI_SetReportInfo
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_SetReportInfo(Player, Script: Integer; PlayerObjs, DefaultObjs: TIntegerArray; var newObjs: TIntegerArray);

Called in MSI_SetPlayerInfo. Sets the Items & their respecive
experiences/amounts depending on the objects filled out during player setup.

.. note::

  | Author: Coh3n
  | Last Updated: 12 October 2010 by Coh3n

Example:

.. code-block:: pascal

  // From MSI_SetPlayerInfo
  MSI_SetReportInfo(i, j, Scripts[j].Trees, MSI_Scripts[Scripts[j].Name].Defaults.Trees, newObjs);
*)
procedure MSI_SetReportInfo(Player, Script: Integer; PlayerObjs, DefaultObjs: TIntegerArray; var newObjs: TIntegerArray);
var
  i: Integer;
  useDefaults: Boolean;
  tmpScript: TScript;
begin
  with MSI_Players[Player] do
  begin
    tmpScript := MSI_Scripts[Scripts[Script].Name];

    if (Length(PlayerObjs) = 0) then
    begin
      useDefaults := True;
      newObjs := DefaultObjs; // Set to default objects
    end else
      newObjs := PlayerObjs;

    SetLength(ReportInfo.Items[Script], Length(newObjs));
    SetLength(ReportInfo.ItemAmounts[Script], Length(ReportInfo.Items[Script]));
    SetLength(ReportInfo.Experiences[Script], Length(ReportInfo.Items[Script]));

    for i := 0 to High(newObjs) do
      with MSI_Players[Player].ReportInfo do
      begin
        if (useDefaults) then
        begin
          // Default items set in the TScript record
          SetLength(Items[Script][i], Length(tmpScript.Defaults.Items[i]));
          Items[Script][i] := tmpScript.Defaults.Items[i];
        end else begin
          // Items dependent on the objects filled out by the user
          SetLength(Items[Script][i], Length(MSI_Objects[newObjs[i]].AssociatedItems));
          Items[Script][i] := MSI_Objects[newObjs[i]].AssociatedItems;
        end;

        SetLength(ItemAmounts[Script][i], Length(Items[Script][i]));
        SetLength(Experiences[Script][i], Length(Items[Script][i]));
        Experiences[Script][i] := MSI_GetItemExp(tmpScript.SkillConst, Items[Script][i]);
      {
        for j := 0 to High(Experiences[Script][i]) do
          Writeln('Player['+IntToStr(Player)+'].Scripts['+IntToStr(Script)+'].Objs['+IntToStr(i)+'] Experience = '+FloatToStr(Experiences[Script][i][j]));
      }
      end;
  end;
end;

(*
MSI_SetPlayerInfo
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_SetPlayerInfo;

Sets the necessary player information (called at the beginning of MSI_MainLoop).
Includes handling of default objects if the user decides not to specify for a
certain player.

.. note::

  | Author: Coh3n
  | Last Updated: 03 July 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_SetPlayerInfo;
*)
procedure MSI_SetPlayerInfo;
var
  i, j: Integer;
  newObjs: TIntegerArray;
begin
  for i := 0 to High(MSI_Players) do
    with MSI_Players[i] do
    begin
      SetLength(ReportInfo.Items, Length(Scripts));
      SetLength(ReportInfo.ItemAmounts, Length(ReportInfo.Items));
      SetLength(ReportInfo.Experiences, Length(ReportInfo.Items));
      SetLength(ReportInfo.Casts, Length(Scripts)); // Magic

      for j := 0 to High(Scripts) do
        case (MSI_Scripts[Scripts[j].Name].SkillConst) of // Need to set specific attributes depending on the skill
          SKILL_WOODCUTTING:
            begin
              MSI_SetReportInfo(i, j, Scripts[j].Trees, MSI_Scripts[Scripts[j].Name].Defaults.Trees, newObjs);
              Scripts[j].Trees := newObjs;
            end;

          SKILL_MINING:
            begin
              MSI_SetReportInfo(i, j, Scripts[j].Rocks, MSI_Scripts[Scripts[j].Name].Defaults.Rocks, newObjs);
              Scripts[j].Rocks := newObjs;
            end;

          SKILL_FISHING:
            begin
              MSI_SetReportInfo(i, j, Scripts[j].FishSpots, MSI_Scripts[Scripts[j].Name].Defaults.FishSpots, newObjs);
              Scripts[j].FishSpots := newObjs;
            end;

          SKILL_COOKING:
            begin
              MSI_SetReportInfo(i, j, Scripts[j].CookingSpot, MSI_Scripts[Scripts[j].Name].Defaults.CookingSpot, newObjs);
              Scripts[j].CookingSpot := newObjs;
            end;

          SKILL_MAGIC:
            begin
              // Set to default spells if needed
              if (Length(Scripts[j].Spells) <= 0) then
              begin
                SetLength(Scripts[j].Staffs, Length(MSI_Scripts[Scripts[j].Name].Defaults.Spells));
                Scripts[j].Spells := MSI_Scripts[Scripts[j].Name].Defaults.Spells;
              end;

              SetLength(ReportInfo.Casts[j], Length(Scripts[CurrentScript].Spells));
              Scripts[j].StaffType := MSI_Scripts[Scripts[j].Name].Defaults.StaffType; // Automatically set to default until other options are added
            end;

          else
            MSI_Debug('ERROR: Invalid skill in MSI_SetPlayerInfo');
        end;
    end;
end;

(*
MSI_SetScriptLength
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_SetScriptLength();

Called AFTER DeclarePlayers. Initially, each player's Scripts length is 100.
This procedure sets the length to how many scripts the user set for each player.
Also sets the length of the player's report information arrays.

.. note::

  | Author: Coh3n
  | Last Updated: 11 October 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_SetScriptLength;
*)
procedure MSI_SetScriptLength(); // SetLength(MSI_Players[i].Scripts, 100);
var
  i, j: Integer;
begin
  for i := 0 to High(MSI_Players) do
    for j := 0 to High(MSI_Players[i].Scripts) do
      if (MSI_Players[i].Scripts[j].Name = 0) then // If the user hasn't set it
      begin
        SetLength(MSI_Players[i].Scripts, j);
        SetLength(MSI_Players[i].ReportInfo.ScriptTimes, j);
        SetLength(MSI_Players[i].ReportInfo.SkillLevels, j);
        SetLength(MSI_Players[i].ReportInfo.GainedExps, j);
        SetLength(MSI_Players[i].ReportInfo.ScriptCounts, j);
        Break;
      end;
end;

(*
MSI_GetSPSAreas
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_GetSPSAreas(): TStringArray;

Used to get the current player's script's SPS areas so there aren't severl
large bitmaps loaded into memory at once.  This ensures SPS will run as fast as
possible.  This procedure is called after switching players.

.. note::

  | Author: Coh3n
  | Last Updated: 14 March 2011 by Coh3n

Example:

.. code-block:: pascal

  SPS_Areas := MSI_GetSPSAreas();
*)
function MSI_GetSPSAreas(): TStringArray;
var
  i, j: Integer;
  Script: TScript;
begin
  with MSI_Players[CurrentPlayer] do
    for i := 0 to High(Scripts) do
    begin
      Script := MSI_Scripts[Scripts[i].Name];

      for j := 0 to High(Script.PathInfo.SPSAreas) do
        if (not InStrArr(Script.PathInfo.SPSAreas[j], Result, True)) then
        begin
          SetLength(Result, Length(Result) + 1);
          Result[High(Result)] := Script.PathInfo.SPSAreas[j];
        end;
    end;

  MSI_SubDebug('Player''s SPS_Areas: ' + ToStr(Result));
end;

(*
MSI_MainLoop
~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_MainLoop;

MSI's mainloop.  Pretty straight forward.  Does what the user wants depending on
the global and player settings.  Called only once in RunMe.simba.

.. note::

  | Author: Coh3n
  | Last Updated: 03 November 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_Mainloop;
*)
procedure MSI_MainLoop;
var
  tmpLoads, tmpTime, time, iCount: Integer;
  Script: TScript;
  takeBreak, skipToBank: Boolean;
  reason: string;
  nPlayer: Boolean;
label
  AtBank, WalkToBank;
begin
  MSI_SetScriptLength;
  MSI_SetPlayerInfo;
  MSI_WriteRemote;

  {$IFDEF SRL_SMART}
  if MSI_SetupVars[SETUP_DEBUG_SMART] then
    SmartSetDebug(True);
  {$ENDIF}

  repeat
    MSI_ResetRemote;

    // Reset temporary variables used for breaking
    tmpLoads := 0;
    MarkTime(tmpTime);

    // Setup player
    if (not MSI_SetupPlayer) then
    begin
      if (MSI_TimedOut) then
        Continue;

      MSI_UnsetPlayer('Failed to setup player', True);
      Continue;
    end;

    // Reset for each player as they could be using different scripts
    {$IFDEF SPS}
    if (ReflectionBroken) then
    begin
      SPS_Areas := MSI_GetSPSAreas();
      SPS_Loaded := False;
    end;
    {$ENDIF}

    // Check player's location; works if player is in the middle of the path
    Script := MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name];
    if (not MSI_AtLocation(MSI_Players[CurrentPlayer].Location)) then // Set location
      if (not MSI_AtLocation(Script.PathInfo.StartLoc)) then // Start location
        if (not MSI_AtLocation(Script.PathInfo.EndLoc)) then // End location
          if (InvCount > 15) then // Assuming it's in the middle of the path somewhere
          begin
            MSI_Players[CurrentPlayer].Location := Script.PathInfo.EndLoc;
            skipToBank := True;
          end else
            MSI_Players[CurrentPlayer].Location := script.PathInfo.StartLoc;

    repeat
      MarkTime(time);
      if (stats_Commit) then
        MSI_Debug('Committed to SRL stats');

      // If player's in middle of path with > 15 items, will walk to bank and deposit
      if (skipToBank) then
      begin
        MSI_SubDebug('Player has > 15 items, banking..');
        skipToBank := False;
        goto WalkToBank;
      end;

      // Walk to location if using a bankable script
      if (not (MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name].BankType = NoBank)) then
      begin
        // Deposits excess items if already at a bank
        iCount := InvCount;
        if (iCount > 0) then
          if (iCount > Length(MSI_Players[CurrentPlayer].Scripts[CurrentScript].Exceptions)) then
          begin
            MSI_Debug('Inventory count = '+ToStr(iCount));
            MSI_Debug('Exceptions Length = '+ToStr(Length(MSI_Players[CurrentPlayer].Scripts[CurrentScript].Exceptions)));

            if (MSI_Locations[MSI_Players[CurrentPlayer].Location].AtBank) then
              if (MSI_AtLocation(MSI_Players[CurrentPlayer].Location)) then
              begin
                MSI_Debug('Found items in inventory, depositing..');
                goto AtBank;
              end;
          end;

        if (not MSI_Walk(True)) then
        begin
          if (MSI_TimedOut) then
            Break;

          MSI_UnsetPlayer('Failed to walk to location', False);
          Break;
        end;
      end;

      // Perform the skill
      if (not MSI_AutoObjects) then
      begin
        if (MSI_TimedOut) then
          Break;

        MSI_UnsetPlayer('Failed to use script: ' + MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name].Name, False);
        Break;
      end;

      // Walks to the bank if using a bankable script
      WalkToBank:
      if (not (MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name].BankType = NoBank)) then
      begin
        if (not MSI_Walk(False)) then // Walk to the bank
        begin
          if (MSI_TimedOut) then
            Break;

          MSI_UnsetPlayer('Failed to walk to bank', False);
          Break;
        end;

        // Banks the proper materials
        AtBank:
        if (not MSI_BankMaterials) then
        begin
          if (MSI_TimedOut) then
            Break;

          MSI_UnsetPlayer('Failed to bank', False);
          Break;
        end;
      end;

      // Set the progress report times
      with MSI_Players[CurrentPlayer].ReportInfo do
      begin
        IncEx(PlayerTime, TimeFromMark(time));
        IncEx(ScriptTimes[CurrentScript], TimeFromMark(time));
      end;

      MSI_ProgressReport;
      MSI_ResetRemote;

      Inc(tmpLoads);

      // Handle the breaking and unsetting of the current player
      nPlayer := MSI_CheckTime(TimeFromMark(tmpTime), reason, takeBreak);
      if (not nPlayer) then
        nPlayer := MSI_CheckLoads(tmpLoads, reason, takeBreak);

      if (nPlayer) then
      begin
        if (takeBreak) then
        begin
          MSI_HandleBreaking;
          MSI_FindRandoms(True);

          takeBreak := False;
        end else
          MSI_UnsetPlayer(reason, True);

        nPlayer := False;
        Break;
      end;

    until(not MSI_Players[CurrentPlayer].Active);
  until(AllPlayersInactive);

  if (AllPlayersInactive) then
  begin
    MSI_CloseHeader('All players inactive, terminating script!');
    Logout;
    MSI_ProgressReport;
    TerminateScript;
  end;
end;

(*
MSI_MainLoop
~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_MainLoop;

Called upon termination of the script.  Ensures all DTMs/file/bitmaps have been
freed.

.. note::

  | Author: Coh3n & Shuttleu
  | Last Updated: 14 Feburary 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_Mainloop;
*)
procedure MSI_ScriptTerminate;
var
  i: Integer;
begin
  // Commit to stats
  stats_Commit;

  // Free DTMs and clear Remote file
  MSI_ClearFile(PATH_REMOTE);
  MSI_FreeAllItems;
  FreeSRL;

  for i := 0 to High(MSI_Files) do
    CloseFile(MSI_Files[i]);

  Writeln('Thank-you for using MSI Phoenix scripts!');
end;
